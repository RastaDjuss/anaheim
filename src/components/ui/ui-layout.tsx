'use client';

import Link from 'next/link';
// If using Next.js 13.3 or older, replace 'next/navigation' with 'next/router' and adapt the code.
import { useRouter } from 'next/router';
import React, { ReactNode, Suspense, useEffect, useRef } from 'react';
import toast, { Toaster } from 'react-hot-toast';
import { AccountChecker } from '@/components/account/account-ui';
import { ExplorerLink } from '@/components/cluster/cluster-ui';
import ClusterUiSelect from '@/components/cluster/ClusterSelector';
import WalletButton from '@/components/solana/wallet-utils/WalletButton';
import { usePathname } from 'next/navigation';

export let UiLayout: React.FC<{
	children: React.ReactNode;
	links: { label: string; path: string }[];
}> = ({ children, links }) => {
	const { pathname } = useRouter(); // Utilisation en dehors de la boucle `map`.

	return (
		<div className="h-full flex flex-col">
			<div className="navbar bg-base-300 dark:text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">
				<div className="flex-1">
					<ul className="menu menu-horizontal px-1 space-x-2">
						{/* Vérifie si le chemin est actif et applique une classe */}
						{links.map ( ({ label, path }) => (
							<li key={path}>
								<Link className={pathname === path ? 'active' : ''} href={path}>
									{label}
								</Link>
							</li>
						) )}
					</ul>
				</div>
				<div className="flex-none space-x-2">
					{/* Ajout d'autres composants tels que les boutons */}
					<WalletButton children={undefined} />
					<ClusterUiSelect />
				</div>
			</div>
			<div className="flex-grow">{children}</div>
		</div>
	);
};

export function LocalClusterChecker({ children }: { children: React.ReactNode }): React.JSX.Element {
	const isLocal = process.env.NEXT_PUBLIC_CLUSTER?.includes ( 'local' );

	useEffect ( () => {
		if (!isLocal) {
			toast.error ( 'You\'re not connected to a local cluster!', { duration: 4000 } );
		}
	}, [isLocal] );

	const links = [
		{ label: 'Example 1', path: '/example1' },
		{ label: 'Example 2', path: '/example2' },
		{ label: 'Dashboard', path: '/dashboard' } // New link
	];

	return (
		<UiLayout links={links}>
			{children}
		</UiLayout>
	);
}

export class TransactionToast extends React.Component<{
	children: ReactNode;
	links: { label: string; path: string }[];
}> {
	render() {
		const { children, links } = this.props;
		const pathname = usePathname (); // Correctement placé dans le corps de `render`.

		return (
			<div className="h-full flex flex-col">
				<div className="navbar bg-base-300 dark:text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">
					<div className="flex-1">
						<Link className="btn btn-ghost normal-case text-xl" href="/">
							Anaheim
						</Link>
						<ul className="menu menu-horizontal px-1 space-x-2">
							{links.map ( ({ label, path }) => (
								<li key={path}>
									<Link className={pathname === path ? 'active' : ''} href={path}>
										{label}
									</Link>
								</li>
							) )}
						</ul>
					</div>
					<div className="flex-none space-x-2">
						<WalletButton children={undefined} />
						<ClusterUiSelect />
					</div>
				</div>
				<LocalClusterChecker>
					<AccountChecker />
				</LocalClusterChecker>
				<div className="flex-grow mx-4 lg:mx-auto">
					<Suspense
						fallback={
							<div className="text-center my-32">
								<span className="loading loading-spinner loading-lg"></span>
							</div>
						}
					>
						{children}
					</Suspense>
					<Toaster position="bottom-right" />
				</div>
				<footer className="footer footer-center p-4 bg-base-300 text-base-content">
					<aside>
						<p>
							Generated by{' '}
							<a
								className="link hover:text-white"
								href="https://github.com/solana-developers/create-solana-dapp"
								target="_blank"
								rel="noopener noreferrer"
							>
								create-solana-dapp
							</a>
						</p>
					</aside>
				</footer>
			</div>
		);
	}
}

export function AppModal({
													 children,
													 title,
													 hide,
													 show,
													 submit,
													 submitDisabled,
													 submitLabel
												 }: {
	children: ReactNode;
	title: string;
	hide: () => void;
	show: boolean;
	submit?: () => void;
	submitDisabled?: boolean;
	submitLabel?: string;
}) {
	const dialogRef = useRef<HTMLDialogElement | null> ( null );

	useEffect ( () => {
		if (!dialogRef.current) return;
		if (show) {
			dialogRef.current.showModal ();
		} else {
			dialogRef.current.close ();
		}
	}, [show] );

	return (
		<dialog className="modal" ref={dialogRef}>
			<div className="modal-box space-y-5">
				<h3 className="font-bold text-lg">{title}</h3>
				{children}
				<div className="modal-action">
					<div className="join space-x-2">
						{submit && (
							<button className="btn btn-xs lg:btn-md btn-primary" onClick={submit} disabled={submitDisabled}>
								{submitLabel || 'Save'}
							</button>
						)}
						<button onClick={hide} className="btn">
							Close
						</button>
					</div>
				</div>
			</div>
		</dialog>
	);
}

export function AppHero({
													children,
													title,
													subtitle
												}: {
	children?: ReactNode;
	title: ReactNode;
	subtitle: ReactNode;
}) {
	return (
		<div className="hero py-[64px]">
			<div className="hero-content text-center">
				<div className="max-w-2xl">
					{typeof title === 'string' ? <h1 className="text-5xl font-bold">{title}</h1> : title}
					{typeof subtitle === 'string' ? <p className="py-6">{subtitle}</p> : subtitle}
					{children}
				</div>
			</div>
		</div>
	);
}

export function ellipsify(str: string = '', len: number = 4) {
	if (str.length > 30) {
		return str.substring ( 0, len ) + '..' + str.substring ( str.length - len );
	}
	return str;
}

export function useTransactionToast() {
	return (signature: string) => {
		toast.success (
			<div className={'text-center'}>
				<div className="text-lg">Transaction sent</div>
				<ExplorerLink path={`tx/${signature}`} label={'View Transaction'} className="btn btn-xs btn-primary" />
			</div>
		);
	};
}